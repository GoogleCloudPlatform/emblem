# coding: utf-8

"""
    Emblem API

    REST API for any Emblem server  # noqa: E501

    OpenAPI spec version: 2021-07-20

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Donor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'email': 'str',
        'mailing_address': 'str',
        'time_created': 'datetime',
        'updated': 'datetime',
        'self_link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'mailing_address': 'mailing_address',
        'time_created': 'timeCreated',
        'updated': 'updated',
        'self_link': 'selfLink'
    }

    def __init__(self, id=None, name=None, email=None, mailing_address=None, time_created=None, updated=None, self_link=None):  # noqa: E501
        """Donor - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._email = None
        self._mailing_address = None
        self._time_created = None
        self._updated = None
        self._self_link = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if mailing_address is not None:
            self.mailing_address = mailing_address
        if time_created is not None:
            self.time_created = time_created
        if updated is not None:
            self.updated = updated
        if self_link is not None:
            self.self_link = self_link

    @property
    def id(self):
        """Gets the id of this Donor.  # noqa: E501

        unique, system-assigned identifier  # noqa: E501

        :return: The id of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Donor.

        unique, system-assigned identifier  # noqa: E501

        :param id: The id of this Donor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Donor.  # noqa: E501

        the display name of this donor  # noqa: E501

        :return: The name of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Donor.

        the display name of this donor  # noqa: E501

        :param name: The name of this Donor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this Donor.  # noqa: E501

        the donor's email address  # noqa: E501

        :return: The email of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Donor.

        the donor's email address  # noqa: E501

        :param email: The email of this Donor.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mailing_address(self):
        """Gets the mailing_address of this Donor.  # noqa: E501

        the donor's physical address  # noqa: E501

        :return: The mailing_address of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._mailing_address

    @mailing_address.setter
    def mailing_address(self, mailing_address):
        """Sets the mailing_address of this Donor.

        the donor's physical address  # noqa: E501

        :param mailing_address: The mailing_address of this Donor.  # noqa: E501
        :type: str
        """

        self._mailing_address = mailing_address

    @property
    def time_created(self):
        """Gets the time_created of this Donor.  # noqa: E501

        system-assigned creation timestamp  # noqa: E501

        :return: The time_created of this Donor.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Donor.

        system-assigned creation timestamp  # noqa: E501

        :param time_created: The time_created of this Donor.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def updated(self):
        """Gets the updated of this Donor.  # noqa: E501

        system-assigned update timestamp  # noqa: E501

        :return: The updated of this Donor.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Donor.

        system-assigned update timestamp  # noqa: E501

        :param updated: The updated of this Donor.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def self_link(self):
        """Gets the self_link of this Donor.  # noqa: E501

        full URI of the resource  # noqa: E501

        :return: The self_link of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Donor.

        full URI of the resource  # noqa: E501

        :param self_link: The self_link of this Donor.  # noqa: E501
        :type: str
        """

        self._self_link = self_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Donor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Donor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
