# coding: utf-8

"""
    Emblem API

    REST API for any Emblem server  # noqa: E501

    OpenAPI spec version: 2021-07-20

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Donation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'campaign': 'str',
        'donor': 'str',
        'amount': 'float',
        'time_created': 'datetime',
        'updated': 'datetime',
        'self_link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'campaign': 'campaign',
        'donor': 'donor',
        'amount': 'amount',
        'time_created': 'timeCreated',
        'updated': 'updated',
        'self_link': 'selfLink'
    }

    def __init__(self, id=None, campaign=None, donor=None, amount=None, time_created=None, updated=None, self_link=None):  # noqa: E501
        """Donation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._campaign = None
        self._donor = None
        self._amount = None
        self._time_created = None
        self._updated = None
        self._self_link = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if campaign is not None:
            self.campaign = campaign
        if donor is not None:
            self.donor = donor
        if amount is not None:
            self.amount = amount
        if time_created is not None:
            self.time_created = time_created
        if updated is not None:
            self.updated = updated
        if self_link is not None:
            self.self_link = self_link

    @property
    def id(self):
        """Gets the id of this Donation.  # noqa: E501

        unique, system-assigned identifier  # noqa: E501

        :return: The id of this Donation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Donation.

        unique, system-assigned identifier  # noqa: E501

        :param id: The id of this Donation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def campaign(self):
        """Gets the campaign of this Donation.  # noqa: E501

        the id of the campaign this donation is for  # noqa: E501

        :return: The campaign of this Donation.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this Donation.

        the id of the campaign this donation is for  # noqa: E501

        :param campaign: The campaign of this Donation.  # noqa: E501
        :type: str
        """

        self._campaign = campaign

    @property
    def donor(self):
        """Gets the donor of this Donation.  # noqa: E501

        the id of the donor this donation is from  # noqa: E501

        :return: The donor of this Donation.  # noqa: E501
        :rtype: str
        """
        return self._donor

    @donor.setter
    def donor(self, donor):
        """Sets the donor of this Donation.

        the id of the donor this donation is from  # noqa: E501

        :param donor: The donor of this Donation.  # noqa: E501
        :type: str
        """

        self._donor = donor

    @property
    def amount(self):
        """Gets the amount of this Donation.  # noqa: E501

        the amount donated, in USD  # noqa: E501

        :return: The amount of this Donation.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Donation.

        the amount donated, in USD  # noqa: E501

        :param amount: The amount of this Donation.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def time_created(self):
        """Gets the time_created of this Donation.  # noqa: E501

        system-assigned creation timestamp  # noqa: E501

        :return: The time_created of this Donation.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Donation.

        system-assigned creation timestamp  # noqa: E501

        :param time_created: The time_created of this Donation.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def updated(self):
        """Gets the updated of this Donation.  # noqa: E501

        system-assigned update timestamp  # noqa: E501

        :return: The updated of this Donation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Donation.

        system-assigned update timestamp  # noqa: E501

        :param updated: The updated of this Donation.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def self_link(self):
        """Gets the self_link of this Donation.  # noqa: E501

        full URI of the resource  # noqa: E501

        :return: The self_link of this Donation.  # noqa: E501
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Donation.

        full URI of the resource  # noqa: E501

        :param self_link: The self_link of this Donation.  # noqa: E501
        :type: str
        """

        self._self_link = self_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Donation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Donation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
