# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Name: Web E2E Test
# Description: This test confirms a locally run instance of the website behaves as expected.
# Triggers: testing-web-e2e-run-tests-trigger (PR trigger)
# Limitations:
# - Relies on an existing instance of the Emblem Content API.
# - User authentication is not in scope of this test.

steps:
  # Prepare to run website "locally" inside Cloud Build.
  - id: 'Copy client libraries directory'
    name: bash
    script: |
      #!/usr/bin/env bash
      cp -R ../client-libs/ client-libs
    dir: 'website'

  - id: 'Install Python packages'
    name: python # use latest to match Playwright container image
    script: |
      #!/usr/bin/env bash
      pip install -r requirements.txt --target .
    dir: 'website'
  
  # Prepare to run tests.
  - id: 'Setup node.js-based test suite'
    name: node:18-slim
    script: |
      #!/usr/bin/env bash
      npm install
    dir: 'testing/website-e2e'

  # Run E2E tests
  # Filesystem from previously executed steps is automatically available.
  - id: 'Run E2E tests'
    name: 'mcr.microsoft.com/playwright/python:v1.32.1-focal'
    script: |
      #!/usr/bin/env bash
      python -m flask run --port ${_FLASK_PORT} &
      cd ../testing/website-e2e && npm test
    dir: 'website'
    env:
      - "EMBLEM_URL=${_EMBLEM_URL}" # for tests to target the website
      - "EMBLEM_SESSION_BUCKET=${_EMBLEM_SESSION_BUCKET}" # only needed for auth
      - "EMBLEM_API_URL=${_EMBLEM_API_URL}" # Target running Content API service
      - "FLASK_PORT=${_FLASK_PORT}" # Configure flask for local use

# Specify a default value for optional variables.
substitutions:
  _EMBLEM_SESSION_BUCKET: nonexistent-bucket # no-op placeholder value
  _REGION: us-central1
  _FLASK_PORT: "8080"
